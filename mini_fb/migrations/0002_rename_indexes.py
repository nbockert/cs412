# Generated by Django 5.1.1 on 2024-10-14 17:32

from django.db import migrations

def named_tuple_fetch_all(cursor):
    "Return all rows from a cursor as a namedtuple"
    from collections import namedtuple

    desc = cursor.description
    Result = namedtuple("Result", [col[0] for col in desc])
    return [Result(*row) for row in cursor.fetchall()]


def rename_indexes(apps, schema_editor):
    from django.db import connection

    with connection.cursor() as cursor:
        # Renaming indexes for Profile table
        cursor.execute(
            """SELECT name FROM sqlite_master WHERE type='index' AND tbl_name='Profile'"""
        )
        for result in named_tuple_fetch_all(cursor):
            old_index_name = result.name
            if "mini_fbs_" in old_index_name:
                new_index_name = old_index_name.replace("mini_fbs_", "mini_fb_", 1)
                cursor.execute(
                    f"""ALTER INDEX {old_index_name} RENAME TO {new_index_name}"""
                )

        # Renaming indexes for StatusMessage table
        cursor.execute(
            """SELECT name FROM sqlite_master WHERE type='index' AND tbl_name='StatusMessage'"""
        )
        for result in named_tuple_fetch_all(cursor):
            old_index_name = result.name
            if "mini_fbs_" in old_index_name:
                new_index_name = old_index_name.replace("mini_fbs_", "mini_fb_", 1)
                cursor.execute(
                    f"""ALTER INDEX {old_index_name} RENAME TO {new_index_name}"""
                )
            



def rename_foreignkeys(apps, schema_editor):
    from django.db import connection

    with connection.cursor() as cursor:
    
        # For the Profile table foreign keys
        cursor.execute(
            """SELECT name FROM sqlite_master WHERE type='table' AND name='Profile'"""
        )
        for result in named_tuple_fetch_all(cursor):
            old_foreignkey_name = result.name
            new_foreignkey_name = old_foreignkey_name.replace("mini_fbs_", "mini_fb_", 1)
            cursor.execute(
                f"""ALTER TABLE Profile RENAME CONSTRAINT {old_foreignkey_name} TO {new_foreignkey_name}"""
            )
        
        # For the StatusMessage table foreign keys
        cursor.execute(
            """SELECT name FROM sqlite_master WHERE type='table' AND name='StatusMessage'"""
        )
        for result in named_tuple_fetch_all(cursor):
            old_foreignkey_name = result.name
            new_foreignkey_name = old_foreignkey_name.replace("mini_fbs_", "mini_fb_", 1)
            cursor.execute(
                f"""ALTER TABLE StatusMessage RENAME CONSTRAINT {old_foreignkey_name} TO {new_foreignkey_name}"""
            )


class Migration(migrations.Migration):

    dependencies = [
        ('mini_fb', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(rename_indexes, migrations.RunPython.noop),
        migrations.RunPython(rename_foreignkeys, migrations.RunPython.noop),
    ]
